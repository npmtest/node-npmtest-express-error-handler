{"/home/travis/build/npmtest/node-npmtest-express-error-handler/test.js":"/* istanbul instrument in package npmtest_express_error_handler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-error-handler/lib.npmtest_express_error_handler.js":"/* istanbul instrument in package npmtest_express_error_handler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_error_handler = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_error_handler = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-error-handler/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-error-handler && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_error_handler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_error_handler\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_error_handler.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_error_handler.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_error_handler.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_error_handler.__dirname + '/lib.npmtest_express_error_handler.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-error-handler/node_modules/express-error-handler/error-handler.js":"/**\n * express-error-handler\n * \n * A graceful error handler for Express\n * applications.\n *\n * Copyright (C) 2013 Eric Elliott\n * \n * Written for\n * \"Programming JavaScript Applications\"\n * (O'Reilly)\n *\n * MIT License\n **/\n\n'use strict';\n\nvar mixIn = require('mout/object/mixIn'),\n  createObject = require('mout/lang/createObject'),\n  path = require('path'),\n  fs = require('fs'),\n  statusCodes = require('http').STATUS_CODES,\n\n  /**\n   * Return true if the error status represents\n   * a client error that should not trigger a\n   * restart.\n   * \n   * @param  {number} status\n   * @return {boolean}\n   */\n  isClientError = function isClientError(status) {\n    return (status >= 400 && status <= 499);\n  },\n\n  /**\n   * Attempt a graceful shutdown, and then time\n   * out if the connections fail to drain in time.\n   * \n   * @param  {object} o options\n   * @param  {object} o.server server object\n   * @param  {object} o.timeout timeout in ms\n   * @param  {function} exit - force kill function\n   */\n  close = function close(o, exit) {\n    // We need to kill the server process so\n    // the app can repair itself. Your process \n    // should be monitored in production and\n    // restarted when it shuts down.\n    // \n    // That can be accomplished with modules\n    // like forever, forky, etc...\n    // \n    // First, try a graceful shutdown:\n    if (o.server && typeof o.server.close ===\n        'function') {\n      try {\n        o.server.close(function () {\n          process.exit(o.exitStatus);\n        });\n      }\n      finally {\n        process.exit(o.exitStatus);\n      }\n    }\n\n    // Just in case the server.close() callback\n    // never fires, this will wait for a timeout\n    // and then terminate. Users can override\n    // this function by passing options.shutdown:\n    exit(o);\n  },\n\n  /**\n   * Take an error status and return a route that\n   * sends an error with the appropriate status\n   * and message to an error handler via\n   * `next(err)`.\n   * \n   * @param  {number} status\n   * @param  {string} message\n   * @return {function} Express route handler\n   */\n  httpError = function httpError (status, message) {\n    var err = new Error();\n    err.status = status;\n    err.message = message ||\n      statusCodes[status] ||\n      'Internal server error';\n\n    return function httpErr(req, res, next) {\n      next(err);\n    };\n  },\n\n  sendFile = function sendFile (staticFile, res) {\n    var filePath = path.resolve(staticFile),\n      stream = fs.createReadStream(filePath);\n    stream.pipe(res);\n  },\n\n  send = function send(statusCode, err, res, o) {\n    var body = {\n        status: statusCode,\n        message: err.message ||\n          statusCodes[statusCode]\n      };\n\n    body = (o.serializer) ?\n      o.serializer(createObject(err, body)) :\n      body;\n\n    res.status(statusCode);\n    res.send(body);\n  },\n  \n  defaults = {\n    handlers: {},\n    views: {},\n    static: {},\n    timeout: 3 * 1000,\n    exitStatus: 1,\n    server: undefined,\n    shutdown: undefined,\n    serializer: undefined,\n    framework: 'express'\n  },\n  createHandler;\n\n/**\n * A graceful error handler for Express\n * applications.\n * \n * @param {object} [options]\n * \n * @param {object} [options.handlers] Custom\n *        handlers for specific status codes.\n *\n * @param {object} [options.views] View files to \n *        render in response to specific status \n *        codes. Specify a default with\n *        options.views.default.\n *\n * @param {object} [options.static] Static files \n *        to send in response to specific status \n *        codes. Specify a default with\n *        options.static.default.\n *\n * @param {number} [options.timeout] Delay \n *        between the graceful shutdown\n *        attempt and the forced shutdown\n *        timeout.\n *\n * @param {number} [options.exitStatus] Custom \n *        process exit status code.\n *\n * @param {object} [options.server] The app server\n *        object for graceful shutdowns.\n *\n * @param {function} [options.shutdown] An\n *        alternative shutdown function if the\n *        graceful shutdown fails.\n *\n * @param {function} serializer A function to\n *        customize the JSON error object.\n *        Usage: serializer(err) return errObj\n *\n * @param {function} framework Either 'express'\n *        (default) or 'restify'.\n *\n * @return {function} errorHandler Express error \n *         handling middleware.\n */\ncreateHandler = function createHandler(options) {\n\n  var o = mixIn({}, defaults, options),\n\n    /**\n     * In case of an error, wait for a timer to\n     * elapse, and then terminate.\n     * @param {object} options\n     * @param {number} o.exitStatus\n     * @param {number} o.timeout\n     */\n    exit = o.shutdown || function exit(o){\n\n      // Give the app time for graceful shutdown.\n      setTimeout(function () {\n        process.exit(o.exitStatus);\n      }, o.timeout);\n\n    },\n    express = o.framework === 'express',\n    restify = o.framework === 'restify',\n    errorHandler;\n\n  /**\n   * Express error handler to handle any\n   * uncaught express errors. For error logging,\n   * see bunyan-request-logger.\n   * \n   * @param  {object}   err \n   * @param  {object}   req\n   * @param  {object}   res\n   * @param  {function} next\n   */\n  errorHandler = function errorHandler(err, req,\n      res, next) {\n\n    var defaultView = o.views['default'],\n      defaultStatic = o.static['default'],\n      status = err && err.status ||\n        res && res.statusCode,\n      handler = o.handlers[status],\n      view = o.views[status],\n      staticFile = o.static[status],\n\n      renderDefault = function\n          renderDefault(statusCode) {\n\n        res.statusCode = statusCode;\n\n        if (defaultView) {\n          return res.render(defaultView, err);\n        }\n\n        if (defaultStatic) {\n          return sendFile(defaultStatic, res);\n        }\n\n        if (restify) {\n          send(statusCode, err, res, o);\n        }\n\n        if (express) {\n          return res.format({\n            json: function () {\n              send(statusCode, err, res, {\n                serializer: o.serializer || function (o) {\n                  return o;\n                }\n              });\n            },\n            text: function () {\n              send(statusCode, err, res, {\n                serializer: function (o) {\n                  return o.message;\n                }\n              });\n            },\n            html: function () {\n              send(statusCode, err, res, {\n                serializer: function (o) {\n                  return o.message;\n                }\n              });\n            }\n          });\n        }\n      },\n\n      resumeOrClose = function\n          resumeOrClose(status) {\n        if (!isClientError(status)) {\n          return close(o, exit);\n        }\n      };\n\n    if (!res) {\n      return resumeOrClose(status);\n    }\n\n    // If there's a custom handler defined,\n    // use it and return.\n    if (typeof handler === 'function') {\n      handler(err, req, res, next);\n      return resumeOrClose(status);\n    }\n\n    // If there's a custom view defined,\n    // render it.\n    if (view) {\n      res.render(view, err);\n      return resumeOrClose(status);\n    }\n\n    // If there's a custom static file defined,\n    // render it.\n    if (staticFile) {\n      sendFile(staticFile, res);\n      return resumeOrClose(status);\n    }\n\n    // If the error is user generated, send\n    // a helpful error message, and don't shut\n    // down.\n    // \n    // If we shutdown on user errors,\n    // attackers can send malformed requests\n    // for the purpose of creating a Denial \n    // Of Service (DOS) attack.\n    if (isClientError(status)) {\n      return renderDefault(status);\n    }\n\n    // For all other errors, deliver a 500\n    // error and shut down.\n    renderDefault(500);\n\n    close(o, exit);\n  };\n\n  if (express) {\n    return errorHandler;\n  }\n\n  if (restify) {\n    return function (req, res, route, err) {\n      return errorHandler(err, req, res);\n    };\n  }\n};\n\ncreateHandler.isClientError = isClientError;\ncreateHandler.clientError = function () {\n  var args = [].slice.call(arguments);\n\n  console.log('WARNING: .clientError() is ' +\n    'deprecated. Use isClientError() instead.');\n\n  return this.isClientError.apply(this, args);\n};\n\n// HTTP error generating route.\ncreateHandler.httpError = httpError;\n\nmodule.exports = createHandler;\n","/home/travis/build/npmtest/node-npmtest-express-error-handler/node_modules/express-error-handler/gruntfile.js":"'use strict';\n/*global module*/\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    jshint: {\n      all: ['./gruntfile.js', './test/*.js',\n        './examples/*.js', './error-handler.js'],\n      options: {\n        curly: true,\n        eqeqeq: true,\n        immed: true,\n        latedef: true,\n        newcap: true,\n        nonew: true,\n        noarg: true,\n        sub: true,\n        undef: true,\n        unused: true,\n        eqnull: true,\n        node: true,\n        strict: true,\n        boss: false\n      }\n    }\n\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n\n  grunt.registerTask('hint', ['jshint']);\n  grunt.registerTask('default', ['jshint']);\n};"}